name: CDPipelineFarmByteUI
on:
  workflow_dispatch:
    inputs:
      Environment:
        default: ""
        description: Env. [Possibles values are(int, rct, prod)]

jobs:
  build-image:
    runs-on: self-hosted
    name: Build docker image
    steps:
      - name: Build the Project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract project version
        id: extract_version
        run: |
          cd book-network-ui
          echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT
      - name: Login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get current date in number
        id: current_date
        run: |
          echo "CURRENT_DATE=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
      - name: Build image and push to docker registry
        uses: docker/build-push-action@v5
        with:
          context: farm-byte-frontend
          file: docker/ui/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/farm-byte-ui:${{ steps.extract_version.outputs.VERSION }}.${{ steps.current_date.outputs.CURRENT_DATE }}, ${{ secrets.DOCKERHUB_USERNAME }}/farm-byte-ui:latest
          build-args: |
            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}
            PROFILE=${{ github.event.inputs.Environment }}
  deploy-service:
    name: Deploy FarmByte UI
    runs-on: self-hosted
    needs: [ build-image ]
    steps:
      - name: Create deployment folder
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          script: mkdir -p ci_cd
          overwrite: true
      - name: Copy docker compose file
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          overwrite: true
          source: docker-compose.yml
          target: ci_cd
      - name: Set environment variables and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          script: |
            export DB_SERVER=${{ secrets.DB_SERVER }}
            export ACTIVE_PROFILE=${{ github.event.inputs.Environment }}
            if [ ${{github.event.inputs.Environment}} == 'rct' ]; then
              export DB_USER=${{ secrets.DB_USER_RCT }}
              export DB_PASSWORD=${{ secrets.DB_PASSWORD_RCT }}
              export DB_PORT=${{ secrets.DB_PORT_RCT }}
              export APP_PORT=${{ secrets.APP_PORT_RCT }}
              export DB_NAME=${{ secrets.DB_NAME_RCT }}
              export VITE_API_BACKEND_URL=${{ secrets.VITE_API_BACKEND_URL_RCT }}
              export UI_PORT=${{ secrets.UI_PORT_RCT }}
            elif [ ${{github.event.inputs.Environment}} == 'prod' ]; then
              export DB_USER=${{ secrets.DB_USER_PROD }}
              export DB_PASSWORD=${{ secrets.DB_PASSWORD_PROD }}
              export DB_PORT=${{ secrets.DB_PORT_PROD }}
              export APP_PORT=${{ secrets.APP_PORT_PROD }}
              export DB_NAME=${{ secrets.DB_NAME_PROD }}
              export VITE_API_BACKEND_URL=${{ secrets.VITE_API_BACKEND_URL_PROD }}
              export UI_PORT=${{ secrets.UI_PORT_PROD }}
            else 
              export DB_USER=${{ secrets.DB_USER_INT }}
              export DB_PASSWORD=${{ secrets.DB_PASSWORD_INT }}
              export DB_PORT=${{ secrets.DB_PORT_INT }}
              export APP_PORT=${{ secrets.APP_PORT_INT }}
              export DB_NAME=${{ secrets.DB_NAME_INT }}
              export VITE_API_BACKEND_URL=${{ secrets.VITE_API_BACKEND_URL_INT }}
              export UI_PORT=${{ secrets.UI_PORT_INT }}
            fi
            cd ci_cd
            docker compose -f docker-compose.yml pull -q
            docker compose down
            docker compose -f docker-compose.yml up -d